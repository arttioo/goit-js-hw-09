{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAASH,SAASC,cAAc,wBAyBtC,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAAEN,WAAUC,UACpBQ,QAAQC,IAAI,CAAEV,WAAUC,WAExBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAlCMN,SAASC,cAAc,SAC/Be,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAMJ,IAJA,IAAMC,EAAIC,OAAOrB,EAAWsB,OACtBC,EAAIF,OAAOlB,EAAUmB,OACrBE,EAAIH,OAAOjB,EAAOkB,OAEfG,EAAI,EAAGA,GAAKD,EAAGC,GAAK,EAAG,CAC9B,IAAMC,EAAcN,EAAIG,GAAKE,EAAI,GACjCV,QAAQC,IAAIU,GACZrB,EAAcoB,EAAGC,GACdC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBQ,QAAQC,IAAI,CAAEV,WAAUC,UACxBsB,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAoCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OAClEQ,QAAQC,IAAI,CAAEV,WAAUC,S,IAEzB0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA/B,GAASgC,OAAOI,QAAQ,oBAAmCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const a = Number(firstDelay.value);\n  const b = Number(delayStep.value);\n  const c = Number(amount.value);\n\n  for (let i = 0; i <= c; i += 1) {\n    const delayResult = a + b * (i - 1);\n    console.log(delayResult);\n    createPromise(i, delayResult)\n      .then(({ position, delay }) => {\n        console.log({ position, delay });\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log({ position, delay });\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","addEventListener","evt","preventDefault","a","Number","value","b","c","i","delayResult","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.784f11f4.js.map"}